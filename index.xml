<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Shubo Zhang</title><link>https://shubozhang.github.io/</link><description>Recent content on Shubo Zhang</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 15 Feb 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://shubozhang.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Postgresql 12 Docker</title><link>https://shubozhang.github.io/posts/tools/pg12/</link><pubDate>Mon, 15 Feb 2021 00:00:00 +0000</pubDate><guid>https://shubozhang.github.io/posts/tools/pg12/</guid><description>Postgresql 12 Docker // inter cpu
version: &amp;#39;3.5&amp;#39; services: postgres: container_name: pg12 image: postgres:12 environment: POSTGRES_USER: pg12 POSTGRES_PASSWORD: pg12 PGDATA: /data/postgres volumes: - postgres12:/Users/szhang/postgresql/pg12 ports: - &amp;#34;25432:5432&amp;#34; networks: - pg12 restart: unless-stopped pgadmin: container_name: pgadmin12 image: dpage/pgadmin4 environment: PGADMIN_DEFAULT_EMAIL: a@gmail.com PGADMIN_DEFAULT_PASSWORD: a@gmail.com volumes: - pgadmin12:/Users/szhang/postgresql/.pgadmin12 ports: - &amp;#34;27777:80&amp;#34; networks: - pg12 restart: unless-stopped networks: pg12: driver: bridge volumes: postgres12: pgadmin12: // Apple M1
version: &amp;#39;3.5&amp;#39; services: postgres: container_name: pg12 image: postgres:12 environment: POSTGRES_USER: pg12 POSTGRES_PASSWORD: pg12 PGDATA: /data/postgres volumes: - postgres12:/Users/szhang/postgresql/pg12 ports: - &amp;#34;25432:5432&amp;#34; networks: - pg12 restart: unless-stopped pgadmin: container_name: pgadmin12 image: dpage/pgadmin4 environment: PGADMIN_DEFAULT_EMAIL: a@gmail.</description></item><item><title>Sonarqube setup</title><link>https://shubozhang.github.io/posts/tools/sonarqube/</link><pubDate>Mon, 15 Feb 2021 00:00:00 +0000</pubDate><guid>https://shubozhang.github.io/posts/tools/sonarqube/</guid><description>Sonarqube version: &amp;#39;2&amp;#39; services: postgres: image: postgres:9.6 networks: - sonarqube environment: POSTGRES_USER: sonar POSTGRES_PASSWORD: sonarpasswd volumes: - ~/postgresql/data sonarqube: image: sonarqube:7.9.5-community ports: - &amp;#34;9000:9000&amp;#34; - &amp;#34;9092:9092&amp;#34; networks: - sonarqube environment: SONARQUBE_JDBC_USERNAME: sonar SONARQUBE_JDBC_PASSWORD: sonarpasswd SONARQUBE_JDBC_URL: &amp;#34;jdbc:postgresql://postgres:5432/sonar&amp;#34; SONAR_SEARCH_JAVAADDITIONALOPTS: &amp;#34;-Xmx4096m -Xms2048m&amp;#34; SONAR_SCANNER_OPTS: &amp;#34;-Xmx4096m&amp;#34; depends_on: - postgres networks: sonarqube:</description></item><item><title>Functions</title><link>https://shubozhang.github.io/posts/software-design-and-engineering/clean-code/functions/</link><pubDate>Sun, 17 Jan 2021 00:00:00 +0000</pubDate><guid>https://shubozhang.github.io/posts/software-design-and-engineering/clean-code/functions/</guid><description>Functions Small Do One Thing</description></item><item><title>Meaningful Names</title><link>https://shubozhang.github.io/posts/software-design-and-engineering/clean-code/meaningful-names/</link><pubDate>Sat, 16 Jan 2021 00:00:00 +0000</pubDate><guid>https://shubozhang.github.io/posts/software-design-and-engineering/clean-code/meaningful-names/</guid><description>Use Intention-Revealing Names The name of a variable, function, or class, should answer all the big questions. It should tell you
why it exists what it does how it is used. Bad example: If a name requires a comment, then the name does not reveal its intent.
int d; // elapsed time in days The name d reveals nothing. It does not evoke a sense of elapsed time, nor of days.</description></item><item><title>How to Use MySQL count</title><link>https://shubozhang.github.io/posts/db/mysql-count/</link><pubDate>Sun, 20 Dec 2020 00:00:00 +0000</pubDate><guid>https://shubozhang.github.io/posts/db/mysql-count/</guid><description>How many ways to use count? count(*): returns a count of the number of all rows (including NULL). count(1): 1 evaludates to non-NULL for every row, so it returns the same results as count(*) count(col_name): returns a count of the number of the rows that col_name is not NULL count(col_name) VS count(*)ï¼Ÿ count(*): returns a count of the number of all rows (including NULL). count(col_name): returns a count of the number of the rows that col_name is not NULL count(*) is recommended even though count(pk) can return the same result.</description></item><item><title>Three ways to log S3 Bucket Activities</title><link>https://shubozhang.github.io/posts/aws/3-ways-to-log-s3/</link><pubDate>Sun, 20 Dec 2020 00:00:00 +0000</pubDate><guid>https://shubozhang.github.io/posts/aws/3-ways-to-log-s3/</guid><description>Enable Server Access Logging for an S3 Bucket. It is one of the S3 bucket properties. You just need to select a target bucket and prefix to complete the setup. The details are available here: https://docs.aws.amazon.com/AmazonS3/latest/user-guide/server-access-logging.html
Pros: less infrastructure no code involved easy to search log for a specific bucket. Cons: the target bucket must be in public ip which is a deal breaker sometimes. no UI.</description></item></channel></rss>
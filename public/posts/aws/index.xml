<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AWS on Shubo Zhang</title>
    <link>https://shubozhang.github.io/posts/aws/</link>
    <description>Recent content in AWS on Shubo Zhang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 27 Mar 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://shubozhang.github.io/posts/aws/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>NoSql也搞ACID：DynamoDB Transaction</title>
      <link>https://shubozhang.github.io/posts/aws/dynamodb-acid/</link>
      <pubDate>Sat, 27 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shubozhang.github.io/posts/aws/dynamodb-acid/</guid>
      <description>先扯扯为啥用DynamoDB，简单说就是公司没有或者没人愿意干DBA，SRE也不想干这活。。。感觉到了cloud后，DBA都华丽转身大数据了，不屑于在搞RDS。 还有些公司搞&amp;quot;you write it， you deploy it，and you maintain it&amp;quot;，一个组要负责自己的产品，从UI到DB，个个都要full-stack。DynamoDB就属于Developer完全可以搞定的， 不需要DBA或者SRE帮忙。 一般业务不需要多表join的，DynamoDB设计好了都没问题，还是有些dev说，我们的业务需要ACID，今天就来打脸了，Transaction is not a deal breaker for Dynamodb anymore。
DynamoDB Transaction保证ACID。ACID意思是atomicity, consistency, isolation, and durability。这里主要谈的是atomicity，同时操作 多个表或者行，结果要是all or nothing，全部操作成功，或者什么都不做。
两个Transactional API   TransactWriteItems
 一个transaction最多操作25个不用的items，每个item大小不超过400 KB，整个transaction大小不超过4 MB。 同一个transaction只能操作同一个item一次。 消耗双倍WCUs。 可以用client token来保持幂等(10 mins)。    TransactReadItems
 一个transaction最多操作25个不用的GET，整个transaction大小不超过4 MB。 返回的是同步读的结果。 消耗双倍RCUs。 读写都不用锁，有冲突就会取消transaction，需要自己处理retry。注意，即使但transaction取消了，还是消耗同样的capacity units。    其他：
 transaction读写都不用锁，有冲突就会取消transaction，需要自己处理retry。注意，即使但transaction取消了，还是消耗同样的capacity units。 transaction必须在同一个AWS region transaction必须在同一个AWS 账户 transaction必须在DynamoDB里    例子 源码： https://github.</description>
    </item>
    
    <item>
      <title>介绍一个本地DynamoDB图形界面应用: dynamodb-admin</title>
      <link>https://shubozhang.github.io/posts/aws/dynamodb-admin/</link>
      <pubDate>Tue, 16 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shubozhang.github.io/posts/aws/dynamodb-admin/</guid>
      <description>DynamoDB一直被人诟病没有好的query tool，查询数据很麻烦，到现在也没有。在就是本地开发不是很友好，AWS提供了Dynamodb Local，但是aws cli query数据 还是很麻烦。今天推荐一个给DynamoDB Local做的Graphical User Interface (GUI)&amp;mdash;dynamodb-admin，可以像在AWS console一样，让本地数据可视化和操作化。
快速设置   通过npm安装dynamodb-admin
npm install -g dynamodb-admin   运行docker： local dynamodb
docker-compose.yml file
version: &amp;#39;3.8&amp;#39;services: dynamodb-local: command: &amp;#34;-jar DynamoDBLocal.jar -sharedDb -optimizeDbBeforeStartup -dbPath ./data&amp;#34; image: &amp;#34;amazon/dynamodb-local:latest&amp;#34; container_name: dynamodb-local ports: - &amp;#34;8000:8000&amp;#34; volumes: - &amp;#34;./docker/dynamodb:/home/dynamodblocal/data&amp;#34; working_dir: /home/dynamodblocalRun docker-compose.yml file
docker-compose up -d   启动dynamodb-admin
 MacOS： dynamodb-admin // 或者定义region和credentials AWS_REGION=eu-west-1 AWS_ACCESS_KEY_ID=local AWS_SECRET_ACCESS_KEY=local dynamodb-admin  Windows: export DYNAMO_ENDPOINT=http://localhost:8000 dynamodb-admin     完成</description>
    </item>
    
    <item>
      <title>Three ways to log S3 Bucket Activities</title>
      <link>https://shubozhang.github.io/posts/aws/3-ways-to-log-s3/</link>
      <pubDate>Sun, 20 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://shubozhang.github.io/posts/aws/3-ways-to-log-s3/</guid>
      <description>A common requirement is to monitor S3 bucket activities, especially for the purpose of auditing. In this blog, I will introduce three ways to implement this feature.
1. Use S3 properties Enable Server Access Logging for an S3 Bucket. It is one of the S3 bucket properties. You just need to select a target bucket and prefix to complete the setup. The details are available here: https://docs.aws.amazon.com/AmazonS3/latest/user-guide/server-access-logging.html
 Pros:  less infrastructure no code involved easy to search log for a specific bucket.</description>
    </item>
    
  </channel>
</rss>
